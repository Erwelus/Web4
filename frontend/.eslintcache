[{"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\index.js":"1","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\App.js":"2","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\serviceWorker.js":"3","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\storage\\storage.js":"4","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\HomePage.js":"5","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\login\\LoginForm.js":"6","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\LogoutButton.js":"7","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Form.js":"8","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Canvas.js":"9","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Table.js":"10","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Checkboxs.js":"11","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\draw.js":"12"},{"size":583,"mtime":1607530846289,"results":"13","hashOfConfig":"14"},{"size":1018,"mtime":1607789630233,"results":"15","hashOfConfig":"14"},{"size":5227,"mtime":1607530846289,"results":"16","hashOfConfig":"14"},{"size":903,"mtime":1607530846290,"results":"17","hashOfConfig":"14"},{"size":5719,"mtime":1607789189440,"results":"18","hashOfConfig":"14"},{"size":4006,"mtime":1607530846286,"results":"19","hashOfConfig":"14"},{"size":590,"mtime":1607530846288,"results":"20","hashOfConfig":"14"},{"size":7864,"mtime":1607789189439,"results":"21","hashOfConfig":"14"},{"size":934,"mtime":1607530846286,"results":"22","hashOfConfig":"14"},{"size":898,"mtime":1607530846288,"results":"23","hashOfConfig":"14"},{"size":668,"mtime":1607530846286,"results":"24","hashOfConfig":"14"},{"size":8242,"mtime":1607789189440,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1pgzlgu",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\index.js",[],["59","60"],"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\App.js",[],"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\serviceWorker.js",[],"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\storage\\storage.js",["61"],"import {createStore} from 'redux';\r\nimport React from \"react\";\r\n\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case \"TOKEN_CLEAR\":\r\n            sessionStorage.clear()\r\n            return {\r\n                token:action.token\r\n            }\r\n\r\n        case \"TOKEN_UPDATE\":\r\n            sessionStorage.setItem(\"access_token\", action.rtoken)\r\n            return {\r\n                token:action.token\r\n            }\r\n\r\n        case \"NEW_TOKEN\":\r\n            sessionStorage.setItem(\"access_token\", action.token)\r\n            sessionStorage.setItem(\"refresh_token\", action.rtoken)\r\n            return {\r\n                token:action.token\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\nconst store =createStore(reducer,{\r\n    token:sessionStorage.getItem(\"access_token\")\r\n})\r\n\r\nstore.subscribe(()=>console.log(store.getState()))\r\n\r\nexport default store","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\HomePage.js",["62","63","64"],"import React, {useEffect, useRef, useState} from \"react\"\r\nimport store from \"../../storage/storage\";\r\nimport Form from \"./Form\";\r\nimport LogoutButton from \"./LogoutButton\";\r\nimport Table from \"./Table\";\r\nimport Canvas from \"./Canvas\";\r\n\r\n\r\nfunction HomePage() {\r\n    const [results, setResults] = useState(null)\r\n    const [x_vals, setX] = React.useState([   {id : -3, check: false},\r\n                                                        {id : -2, check: false},\r\n                                                        {id : -1, check: false},\r\n                                                        {id : 0, check: false},\r\n                                                        {id : 1, check: false},\r\n                                                        {id : 2, check: false},\r\n                                                        {id : 3, check: false},\r\n                                                        {id : 4, check: false},\r\n                                                        {id : 5, check: false}]);\r\n    const [y_val, setY] = useState(null);\r\n    const [r_vals, setR] = React.useState([   {id : 1,   check: false},\r\n                                                        {id : 2,   check: false},\r\n                                                        {id : 3,   check: false},\r\n                                                        {id : 4,   check: false},\r\n                                                        {id : 5,   check: false}]);\r\n    const MessageText = useRef()\r\n\r\n    function validate_number(str, min, max) {\r\n        let n = parseFloat(str);\r\n        return (!isNaN(n) && n >= min && n <= max);\r\n    }\r\n\r\n    function validate(){\r\n        const validation_result = !validate_number(y_val, -5, 5)\r\n        if (validation_result){\r\n            if (MessageText.current !== null) {\r\n                MessageText.current.show({\r\n                    severity: 'warn',\r\n                    summary: 'Validation error'\r\n                })\r\n            }\r\n        }\r\n        return !validation_result\r\n    }\r\n\r\n    function getR() {\r\n        let R = 0;\r\n        r_vals.map(r_1 => {\r\n            if(r_1.check === true){\r\n                R = r_1.id\r\n            }\r\n        })\r\n        return R\r\n    }\r\n\r\n    useEffect(() => {\r\n        x_vals.map(x_vals => {\r\n            if (x_vals.check === true) {\r\n                if (results === null) {\r\n                    fetch(\"/api/app/results\", {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json;charset=utf-8',\r\n                            'Authorization': `Bearer_${store.getState().token}`\r\n                        },\r\n                    }).then(response => response.text().then(text => {\r\n                        if (response.ok) {\r\n                            setResults(JSON.parse(text))\r\n                        }\r\n                        if (response.status == 403) {\r\n                            fetch(\"/api/refresh/token\", {\r\n                                method: 'POST',\r\n                                headers: {'Content-Type': 'application/json'},\r\n                                body: JSON.stringify({refresh_token: sessionStorage.getItem(\"refresh_token\")})\r\n                            }).then(response => response.json().then(rtoken => {\r\n                                if (response.ok) {\r\n                                    store.dispatch({type: \"TOKEN_UPDATE\", token: rtoken.token})\r\n                                    fetch(\"/api/app/area\", {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json;charset=utf-8',\r\n                                            'Authorization': `Bearer_${store.getState().token}`\r\n                                        },\r\n                                        body: JSON.stringify({\r\n                                            x: x_vals.id,\r\n                                            y: y_val,\r\n                                            r: getR()\r\n                                        })\r\n                                    }).then(response => response.text().then(text => {\r\n                                        if (response.ok) {\r\n                                            setResults(JSON.parse(text))\r\n                                        } else {\r\n                                            MessageText.current.show({\r\n                                                severity: 'error',\r\n                                                summary: 'Refresh token error'\r\n                                            })\r\n                                        }\r\n                                    }))\r\n                                } else {\r\n                                    MessageText.current.show({\r\n                                        severity: 'error',\r\n                                        summary: 'Refresh token error'\r\n                                    })\r\n                                }\r\n                            }))\r\n                        }\r\n                    }))\r\n                }\r\n            }\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <LogoutButton />\r\n            <Canvas validateNumber={validate_number} messageText={MessageText}  x={x_vals} y={y_val} r={r_vals} results={results} setResults={setResults}/>\r\n            <Form setResults={setResults} messageText={MessageText} x={x_vals} y={y_val} r={r_vals} setX={setX} setY={setY} setR={setR} validate={validate}/>\r\n            <Table results={results}/>\r\n        </div>\r\n    );\r\n}\r\nexport default HomePage","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\login\\LoginForm.js",[],"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\LogoutButton.js",["65"],"import React, {useEffect} from \"react\"\r\nimport store from \"../../storage/storage\";\r\nimport {Button} from \"primereact/button\";\r\n\r\n\r\nconst logoutHandle=()=>{\r\n    store.dispatch({type: \"TOKEN_CLEAR\", token: null})\r\n\r\n}\r\n\r\nfunction LogoutButton() {\r\n\r\n\r\n    return (\r\n        <div className=\"p-align-center p-fluid\">\r\n                <div className=\"p-sm-12 p-md-6 p-xl-3\">\r\n                    <Button type=\"button\" onClick={logoutHandle} className=\"p-button-primary p-margin\" label=\"Logout\"/>\r\n                </div>\r\n            <br/>\r\n        </div>\r\n    );\r\n}\r\nexport default LogoutButton","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Form.js",["66","67","68","69","70"],"import React, {useRef} from \"react\"\r\nimport store from \"../../storage/storage\";\r\nimport {Button} from \"primereact/button\";\r\nimport {Messages} from \"primereact/messages\";\r\nimport {InputNumber} from \"primereact/inputnumber\";\r\nimport Checkboxs from \"./Checkboxs\";\r\n\r\n\r\nfunction Form(props) {\r\n\r\n    const onSubmit = () => {\r\n        props.x.map(x => {\r\n            if (x.check === true){\r\n                if (props.validate()) {\r\n                    fetch(\"/api/app/area\", {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json;charset=utf-8',\r\n                            'Authorization': `Bearer_${store.getState().token}`\r\n                        },\r\n                        body: JSON.stringify({x: x.id, y: props.y, r: getR()})\r\n                    }).then(response => response.text().then(text => {\r\n                        if (response.ok) {\r\n                            props.setResults(JSON.parse(text))\r\n                        }\r\n                        if (response.status == 403) {\r\n                            fetch(\"/api/refresh/token\", {\r\n                                method: 'POST',\r\n                                headers: {'Content-Type': 'application/json'},\r\n                                body: JSON.stringify({refresh_token: sessionStorage.getItem(\"refresh_token\")})\r\n                            }).then(response => response.json().then(rtoken => {\r\n                                if (response.ok) {\r\n                                    store.dispatch({type: \"TOKEN_UPDATE\", token: rtoken.token})\r\n                                    fetch(\"/api/app/area\", {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json;charset=utf-8',\r\n                                            'Authorization': `Bearer_${store.getState().token}`\r\n                                        },\r\n                                        body: JSON.stringify({x: x.id, y: props.y, r: getR()})\r\n                                    }).then(response => response.text().then(text => {\r\n                                        if (response.ok) {\r\n                                            props.setResults(JSON.parse(text))\r\n                                        } else {\r\n                                            props.messageText.current.show({\r\n                                                severity: 'error',\r\n                                                summary: 'Refresh token error'\r\n                                            })\r\n                                        }\r\n                                    }))\r\n                                } else {\r\n                                    props.messageText.current.show({\r\n                                        severity: 'error',\r\n                                        summary: 'Refresh token error'\r\n                                    })\r\n                                }\r\n                            }))\r\n                        }\r\n                    }))\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    function getR() {\r\n        let R = 0;\r\n        props.r.map(r_1 => {\r\n            if(r_1.check === true){\r\n                R = r_1.id\r\n            }\r\n        })\r\n        return R\r\n    }\r\n\r\n\r\n    const onClear = () => {\r\n        fetch(\"/api/app/clear\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8',\r\n                'Authorization': `Bearer_${store.getState().token}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                props.setResults(null)\r\n            }\r\n            if (response.status == 403) {\r\n                fetch(\"/api/refresh/token\", {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({refresh_token: sessionStorage.getItem(\"refresh_token\")})\r\n                }).then(response => response.json().then(rtoken => {\r\n                    if (response.ok) {\r\n                        store.dispatch({type: \"TOKEN_UPDATE\", token: rtoken.token})\r\n                        fetch(\"/api/app/clear\", {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json;charset=utf-8',\r\n                                'Authorization': `Bearer_${store.getState().token}`\r\n                            }\r\n                        }).then(response => {\r\n                            if (response.ok) {\r\n                                props.setResults(null)\r\n                            } else {\r\n                                props.messageText.current.show({\r\n                                    severity: 'error',\r\n                                    summary: 'Refresh token error'\r\n                                })\r\n                            }\r\n                        })\r\n                    } else {\r\n                        props.messageText.current.show({\r\n                            severity: 'error',\r\n                            summary: 'Refresh token error'\r\n                        })\r\n                    }\r\n                }))\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-align-center p-fluid\">\r\n            <form>\r\n                <Messages ref={(el) => props.messageText.current = el}/>\r\n                <div className=\"p-field p-grid\"     >\r\n                    <div className=\"p-field p-grid \">\r\n                        <br/>\r\n                        <label htmlFor=\"x_value\" className=\"p-sm-2 p-md-4 p-xl-6\">X:</label>\r\n                            <span className=\"p-sm-12 p-md-7 p-xl-5 p-col\" >\r\n                                {props.x.map(x =>{\r\n                                    return <Checkboxs  x={x} setX={props.setX} xs={props.x} key={x.id} string={\"x\"}/>\r\n                                })}\r\n                            </span>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-grid \">\r\n                        <label htmlFor=\"y_value\" className=\"p-sm-2 p-md-4 p-xl-6\">Y:</label>\r\n                        <div className=\"p-sm-12 p-md-7 p-xl-5 p-col\">\r\n                            <InputNumber id=\"y_value\" value={props.y} onValueChange={(e) => props.setY(e.value)} mode=\"decimal\"\r\n                                         min={-3} max={5}\r\n                                         minFractionDigits={1} maxFractionDigits={5} placeholder=\"Enter Y [-3;5]\"/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"p-field p-grid \">\r\n                        <br/>\r\n                        <label htmlFor=\"r_value\" className=\"p-sm-2 p-md-4 p-xl-6\">R:</label>\r\n                        <span className=\"p-sm-12 p-md-7 p-xl-5 p-col\" >\r\n                            {props.r.map(r =>{\r\n                                return <Checkboxs  x={r} setX={props.setR} xs={props.r} key={r.id} string={\"r\"} />\r\n                            })}\r\n                        </span>\r\n                    </div>\r\n                    <br/>\r\n\r\n                    <div className=\"p-sm-12 p-md-6  p-align-center p-col\">\r\n                        <Button type=\"button\" onClick={onSubmit} className=\"p-button-primary p-margin\" label=\"Submit\" icon=\"pi\"/>\r\n                    </div>\r\n\r\n                    <br/>\r\n\r\n                    <div className=\"p-sm-12 p-md-6 p-xl-3 p-align-center p-col\" >\r\n                        <Button type=\"button\" onClick={onClear} className=\"p-button-primary\" label=\"Clear\" icon=\"pi\"/>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        )\r\n\r\n}\r\n\r\n\r\nexport default Form;\r\n","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Canvas.js",["71","72","73","74"],"import React, {useEffect, useRef} from \"react\"\r\nimport {clickPoint, draw, drawPoints} from \"./draw\"\r\nimport Checkboxs from \"./Checkboxs\";\r\n\r\nfunction Canvas(props) {\r\n    const canvas = useRef()\r\n\r\n    function maxR(){\r\n        let maxR = 0;\r\n        {props.r.map(r =>{\r\n            if(r.check === true){\r\n                maxR = r.id\r\n            }\r\n        })}\r\n        return maxR;\r\n    }\r\n    useEffect(() => {\r\n        draw(maxR(), canvas.current.getContext(\"2d\"));\r\n        if(props.results != null) {\r\n            drawPoints(maxR(), props.results, canvas.current.getContext(\"2d\"))\r\n        }\r\n    }, [draw, drawPoints, props]);\r\n    return <div>\r\n\r\n        <canvas className=\"p-align-center\" width=\"750\" height=\"500\" ref={canvas} onClick={(e) => {\r\n            clickPoint(e, canvas.current.getContext(\"2d\"),maxR(), props.validateNumber, props.messageText, props.setResults)\r\n        }}/>\r\n    </div>\r\n}\r\n\r\nexport default Canvas;","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Table.js",["75","76"],"import React, {useEffect} from \"react\"\r\nimport store from \"../../storage/storage\";\r\nimport {Column} from \"primereact/column\";\r\nimport {DataTable} from \"primereact/datatable\";\r\nimport '../../index.css'\r\nimport {Button} from \"primereact/button\";\r\n\r\n\r\nfunction Table(props) {\r\n\r\n    const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n    const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n\r\n    return<div >\r\n        <DataTable id=\"result_table\" value={props.results} paginator rows={10}\r\n                   paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n            <Column field=\"x\" header=\"x\"/>\r\n            <Column field=\"y\" header=\"y\"/>\r\n            <Column field=\"r\" header=\"r\"/>\r\n            <Column field=\"res\" header=\"result\"/>\r\n        </DataTable>\r\n    </div>\r\n}\r\nexport default Table","C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\Checkboxs.js",[],"C:\\Users\\user\\IdeaProjects\\web4\\frontend\\src\\components\\main\\draw.js",["77","78","79","80","81"],"import store from \"../../storage/storage\";\r\n\r\n\r\nfunction getSign(x){\r\n    if (x<0){\r\n        return -1;\r\n    }else{\r\n        return 1;\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction coordinate_arrow(context, x0, y0, x1, y1) {\r\n\r\n    var length_head =7\r\n    var delta_x = x0 - x1;\r\n\r\n    context.font='15px courier new';\r\n\r\n    context.beginPath()\r\n    context.lineWidth = 2\r\n    context.moveTo(x0, y0)\r\n    context.lineTo(x1, y1)\r\n    context.stroke()\r\n\r\n\r\n    context.beginPath();\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x1+(getSign(delta_x)*length_head),y1+(getSign(delta_x)*length_head))\r\n    context.lineTo(x1-length_head,y1+length_head)\r\n    context.fill()\r\n\r\n}\r\n\r\nfunction getDashLength(x,y){\r\n    let dash_length\r\n\r\n\r\n\r\n    if(x>y){\r\n        dash_length = y / 6\r\n    }else{\r\n        dash_length = x / 6\r\n    }\r\n\r\n    return dash_length\r\n\r\n\r\n}\r\nfunction getRArray(R_value) {\r\n\r\n    let R=[]\r\n    if ((R_value !== null)&&(R_value !== 0)) {\r\n        R_value=parseFloat(R_value)\r\n        R[0] = R_value\r\n        R[1] = R_value / 2\r\n        R[2] = -R_value / 2\r\n        R[3] = -R_value\r\n    }else R=[\"R\",\"R/2\",\"-R/2\",\"-R\"]\r\n\r\n    return R\r\n}\r\n\r\nfunction coordinate_system(context, height_pers, width_pers, R){\r\n\r\n    let dash_length\r\n\r\n\r\n\r\n\r\n\r\n\r\n    context.strokeStyle = \"white\";\r\n    context.fillStyle = \"white\";\r\n\r\n\r\n    let y = context.canvas.height * height_pers\r\n    let x = context.canvas.width * width_pers\r\n\r\n    let y_coef=(context.canvas.height-y)/2\r\n    let x_coef=(context.canvas.width-x)/2\r\n\r\n    dash_length=getDashLength(x,y)\r\n\r\n    coordinate_arrow(context, x_coef , context.canvas.height *0.5, context.canvas.width - x_coef, context.canvas.height *0.5)\r\n    context.fillText('X', context.canvas.width - x_coef-10, context.canvas.height * 0.5+15)\r\n    coordinate_arrow(context, context.canvas.width *0.5, context.canvas.height - y_coef, context.canvas.width *0.5, y_coef)\r\n    context.fillText('Y', context.canvas.width * 0.5+10, y_coef+15)\r\n\r\n    let counterx=0\r\n\r\n    for (let i = -2; i <=2 ; i++) {\r\n        if (i !=0){\r\n            context.fillText(R[counterx],context.canvas.width/2+6,context.canvas.height/2+dash_length*i+5)\r\n            context.beginPath()\r\n            context.moveTo(context.canvas.width/2-4,context.canvas.height/2+dash_length*i)\r\n            context.lineTo(context.canvas.width/2+4,context.canvas.height/2+dash_length*i)\r\n            context.stroke()\r\n            counterx++\r\n        }\r\n    }\r\n\r\n    let countery=3\r\n    for (let i = -2; i <=2 ; i++) {\r\n        if(i != 0){\r\n            context.fillText(R[countery],context.canvas.width/2+dash_length*i-5, context.canvas.height/2-10)\r\n            context.beginPath()\r\n            context.moveTo(context.canvas.width/2+dash_length*i, context.canvas.height/2+4)\r\n            context.lineTo(context.canvas.width/2+dash_length*i, context.canvas.height/2-4)\r\n            context.stroke()\r\n            countery--\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction draw(r,context){\r\n\r\n    let r_array = getRArray(r)\r\n\r\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height)\r\n\r\n    if (r !== 0) {\r\n\r\n        context.strokeStyle = \"#00A66F\"\r\n        context.fillStyle = \"#00A66F\"\r\n\r\n        let step = getDashLength(context.canvas.width, context.canvas.height)\r\n        let x = context.canvas.width / 2;\r\n        let y = context.canvas.height / 2;\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n        context.arc(x, y, 2 * step, 0, Math.PI / 2, false);\r\n        context.fill();\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n        context.lineTo(x - step, y);\r\n        context.lineTo(x, y - 2 * step);\r\n        context.fill();\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n        context.lineTo(x + 2 * step, y);\r\n        context.lineTo(x + 2 * step, y - 2 * step);\r\n        context.lineTo(x, y - 2 * step);\r\n        context.fill();\r\n    }\r\n\r\n    coordinate_system(context,1,1,r_array)\r\n    coordinate_system(context,1,1,r_array)\r\n\r\n}\r\n\r\n\r\nfunction drawResult(x, y, R,alpha,red,green, context) {\r\n\r\n\r\n\r\n    let dash_length\r\n    if (R == 0){\r\n        dash_length = 0\r\n    } else {\r\n        dash_length = 2*getDashLength(context.canvas.width, context.canvas.height)/R\r\n    }\r\n\r\n    context.strokeStyle = `rgba(${red},${green},0,${alpha})`;\r\n    context.fillStyle = `rgba(${red},${green},0,${alpha})`;\r\n\r\n    context.beginPath()\r\n    context.moveTo(context.canvas.width/2+x*dash_length,context.canvas.height/2-y*dash_length)\r\n    context.arc(context.canvas.width/2+x*dash_length,context.canvas.height/2-y*dash_length,4,0,2*Math.PI)\r\n    context.fill()\r\n}\r\n\r\nfunction clickPoint(event,context,r, validateNumber, messageText, setResults){\r\n\r\n\r\n\r\n    let R=r\r\n    let dash_length = 4*getDashLength(context.canvas.width, context.canvas.height)/R\r\n\r\n    const x_c = event.nativeEvent.offsetX\r\n    const y_c = event.nativeEvent.offsetY\r\n\r\n    let x = (2*x_c - context.canvas.width)/dash_length\r\n    let y = -((2*y_c - context.canvas.height)/dash_length)\r\n\r\n    console.log((2*x_c - context.canvas.width)/dash_length)\r\n\r\n    if (!validateNumber(x, -3, 5) || !validateNumber(y, -5, 5) ||!validateNumber(r, -3, 5)){\r\n        if (messageText.current !== null) {\r\n            messageText.current.show({\r\n                severity: 'warn',\r\n                summary: 'Validation error'\r\n            })\r\n        }\r\n    }else {\r\n        fetch(\"/api/app/area\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8',\r\n                'Authorization': `Bearer_${store.getState().token}`\r\n            },\r\n            body: JSON.stringify({x: x, y:y, r: r})\r\n        }).then(response => response.text().then(text => {\r\n            if (response.ok) {\r\n                setResults(JSON.parse(text))\r\n            }\r\n            if (response.status == 403) {\r\n                fetch(\"/api/refresh/token\", {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({refresh_token: sessionStorage.getItem(\"refresh_token\")})\r\n                }).then(response => response.json().then(rtoken => {\r\n                    if (response.ok) {\r\n                        store.dispatch({type: \"TOKEN_UPDATE\", token: rtoken.token})\r\n                        fetch(\"/api/app/area\", {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json;charset=utf-8',\r\n                                'Authorization': `Bearer_${store.getState().token}`\r\n                            },\r\n                            body: JSON.stringify({x: x, y: y, r: r})\r\n                        }).then(response => response.text().then(text => {\r\n                            if (response.ok) {\r\n                                setResults(JSON.parse(text))\r\n                            } else {\r\n                                messageText.current.show({\r\n                                    severity: 'error',\r\n                                    summary: 'Refresh token error'\r\n                                })\r\n                            }\r\n                        }))\r\n                    } else {\r\n                        messageText.current.show({\r\n                            severity: 'error',\r\n                            summary: 'Refresh token error'\r\n                        })\r\n                    }\r\n                }))\r\n            }\r\n        }))\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction drawPoints(r, results, context){\r\n\r\n    if (results.length>0) {\r\n        let i_old;\r\n        let iter = 1;\r\n        if (results.length>5){\r\n            i_old = results.length -5\r\n        }else i_old=0\r\n\r\n\r\n        for (let i = results.length-1; i >= i_old ; i--) {\r\n            console.log(results[i].x+\"                           \"+parseFloat(results[i].x))\r\n            if (results[i].res == \"true\")\r\n                drawResult(parseFloat(results[i].x), parseFloat(results[i].y),parseFloat(r),5 / (5 * iter),0,255, context)\r\n            else drawResult(parseFloat(results[i].x), parseFloat(results[i].y),parseFloat(r),5 / (5 * iter),255 , 0, context)\r\n            iter++\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport {draw,drawPoints,clickPoint}",["82","83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"92","severity":1,"message":"93","line":48,"column":24,"nodeType":"94","messageId":"95","endLine":48,"endColumn":26},{"ruleId":"92","severity":1,"message":"93","line":57,"column":27,"nodeType":"94","messageId":"95","endLine":57,"endColumn":29},{"ruleId":"96","severity":1,"message":"97","line":70,"column":45,"nodeType":"98","messageId":"99","endLine":70,"endColumn":47},{"ruleId":"88","severity":1,"message":"100","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"101","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":22},{"ruleId":"92","severity":1,"message":"93","line":12,"column":23,"nodeType":"94","messageId":"95","endLine":12,"endColumn":25},{"ruleId":"96","severity":1,"message":"97","line":26,"column":45,"nodeType":"98","messageId":"99","endLine":26,"endColumn":47},{"ruleId":"92","severity":1,"message":"93","line":67,"column":25,"nodeType":"94","messageId":"95","endLine":67,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":87,"column":33,"nodeType":"98","messageId":"99","endLine":87,"endColumn":35},{"ruleId":"88","severity":1,"message":"102","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":10,"column":9,"nodeType":"105","messageId":"106","endLine":14,"endColumn":12},{"ruleId":"92","severity":1,"message":"93","line":10,"column":24,"nodeType":"94","messageId":"95","endLine":10,"endColumn":26},{"ruleId":"107","severity":1,"message":"108","line":22,"column":8,"nodeType":"109","endLine":22,"endColumn":33,"suggestions":"110"},{"ruleId":"88","severity":1,"message":"100","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"111","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"96","severity":1,"message":"112","line":94,"column":15,"nodeType":"98","messageId":"99","endLine":94,"endColumn":17},{"ruleId":"96","severity":1,"message":"112","line":106,"column":14,"nodeType":"98","messageId":"99","endLine":106,"endColumn":16},{"ruleId":"96","severity":1,"message":"97","line":163,"column":11,"nodeType":"98","messageId":"99","endLine":163,"endColumn":13},{"ruleId":"96","severity":1,"message":"97","line":212,"column":33,"nodeType":"98","messageId":"99","endLine":212,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":266,"column":32,"nodeType":"98","messageId":"99","endLine":266,"endColumn":34},{"ruleId":"84","replacedBy":"113"},{"ruleId":"86","replacedBy":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Checkboxs' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'maxR'. Either include it or remove the dependency array. Outer scope values like 'draw' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["117"],"'store' is defined but never used.","Expected '!==' and instead saw '!='.",["115"],["116"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [maxR, props]",{"range":"120","text":"121"},[606,631],"[maxR, props]"]